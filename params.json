{"name":"StreamAlg","tagline":"Streams à la carte: Extensible stream pipelines with object algebras.","body":"## StreamAlg\r\n\r\n[![Build Status](https://travis-ci.org/biboudis/streamalg.svg?branch=master)](https://travis-ci.org/biboudis/streamalg)\r\n\r\nThe StreamAlg repository contains the source code artifact that accompanies the\r\n_Streams à la carte: Extensible Pipelines with Object Algebras_ paper, to appear at [ECOOP15](http://2015.ecoop.org).\r\n\r\n- Preprint: http://goo.gl/P2XO68\r\n\r\n### Overview\r\n\r\nWe address extensibility shortcomings in libraries for lazy-streaming queries\r\nwith a new design. The architecture underlying this design borrows heavily from\r\nOliveira and Cook's object algebra solution to the expression problem, extended\r\nwith a design that exposes the push/pull character of the iteration, and an\r\nencoding of higher-kinded polymorphism.\r\n\r\nIn this library we apply our design to Java and show that the addition of full\r\nextensibility is accompanied by high performance, matching or exceeding that of\r\nthe original, highly-optimized Java streams library.\r\n\r\nIn this repository we present a fundamental set of sequential operators ```map```,\r\n```filter```, ```reduce```, ```count```, ```take/limit``` and ```iterate```.\r\n\r\nAdditionally we present the behaviors that are discussed in the paper: push, pull, fused pull, logging, id (for\r\nblocking terminal operators), future (for non-blocking terminal operators).\r\n\r\n### Getting Started\r\n\r\nClone the project:\r\n```shell\r\ngit clone git@github.com:biboudis/streamalg.git\r\n```\r\nThe project is built with maven and its dependencies are automatically resolved: Guava, JMH and JUnit. To run the test suite simply run:\r\n```shell\r\nmvn test\r\n```\r\nThe tests cover all examples included in the paper (operators, behaviors) and cases used as motivation as well. The ```streams``` package is covered at:\t87% classes,\t90% methods,\t91% lines.\r\n\r\nBenchmarks are reproduced by executing:\r\n```shell\r\nsh run_benchmarks.sh\r\n```\r\n\r\n### Project Structure\r\nThe basic packages of this artifact are the following:\r\n\r\n#### Object Algebras\r\n- StreamAlg: describes the object algebra of the intermediate operators of streams.\r\n- TakeStreamAlg: adds to streams the ```take``` combinator.\r\n- ExecStreamAlg: adds to streams the terminal operators.\r\n- ExecIterateStreamAlg: adds to streams the ```iterate``` terminal operator.\r\n- ExecTakeStreamAlg: unifies terminal operators with the algebra with the ```take``` combinator.\r\n\r\nThe following factories implement different combinations of behaviors:\r\n#### Factories\r\n- ExecFusedPullFactory\r\n- ExecFutureFactory\r\n- ExecPullFactory\r\n- ExecPullWithIterateFactory\r\n- ExecPullWithTakeFactory\r\n- ExecPushFactory\r\n- ExecPushWithTakeFactory\r\n- LogFactory\r\n- PullFactory\r\n- PushFactory\r\n\r\n### Benchmarks\r\nThe ```run_benchmarks.sh``` script simply builds the JMH benchmarks über-jar and then uses the command line interface\r\nof JMH to pass the arguments of the experiments. The script will run all benchmarks in\r\n```streamalg/src/main/java/benchmarks/*``` and their description is included in the paper:\r\n\r\n```\r\nbenchmarks.Benchmark_BasicPipelines.cart_AlgebrasPull\r\nbenchmarks.Benchmark_BasicPipelines.cart_AlgebrasPush\r\nbenchmarks.Benchmark_BasicPipelines.cart_reduce_Baseline\r\nbenchmarks.Benchmark_BasicPipelines.cart_reduce_Java8Streams\r\nbenchmarks.Benchmark_BasicPipelines.filter_map_reduce_AlgebrasPull\r\nbenchmarks.Benchmark_BasicPipelines.filter_map_reduce_AlgebrasPush\r\nbenchmarks.Benchmark_BasicPipelines.filter_map_reduce_Baseline\r\nbenchmarks.Benchmark_BasicPipelines.filter_map_reduce_Java8Streams\r\nbenchmarks.Benchmark_BasicPipelines.filter_reduce_AlgebrasPull\r\nbenchmarks.Benchmark_BasicPipelines.filter_reduce_AlgebrasPush\r\nbenchmarks.Benchmark_BasicPipelines.filter_reduce_Baseline\r\nbenchmarks.Benchmark_BasicPipelines.filter_reduce_Java8Streams\r\nbenchmarks.Benchmark_BasicPipelines.reduce_AlgebrasPull\r\nbenchmarks.Benchmark_BasicPipelines.reduce_AlgebrasPush\r\nbenchmarks.Benchmark_BasicPipelines.reduce_Baseline\r\nbenchmarks.Benchmark_BasicPipelines.reduce_Java8Streams\r\nbenchmarks.Benchmark_FusedPipelines.filters_Algebras_FusedPull\r\nbenchmarks.Benchmark_FusedPipelines.filters_Algebras_NotFusedPull\r\nbenchmarks.Benchmark_FusedPipelines.filters_Java8Streams\r\nbenchmarks.Benchmark_FusedPipelines.maps_Algebras_FusedPull\r\nbenchmarks.Benchmark_FusedPipelines.maps_Algebras_NotFusedPull\r\nbenchmarks.Benchmark_FusedPipelines.maps_Java8Streams\r\nbenchmarks.Benchmark_IteratorPipelines.count_iterate_AlgebrasPull\r\nbenchmarks.Benchmark_IteratorPipelines.count_iterate_Java8Streams\r\nbenchmarks.Benchmark_IteratorPipelines.filter_count_iterate_AlgebrasPull\r\nbenchmarks.Benchmark_IteratorPipelines.filter_count_iterate_Java8Streams\r\nbenchmarks.Benchmark_IteratorPipelines.filter_map_count_iterate_AlgebrasPull\r\nbenchmarks.Benchmark_IteratorPipelines.filter_map_count_iterate_Java8Streams\r\nbenchmarks.Benchmark_TakePipelines.limit_count_AlgebrasPull\r\nbenchmarks.Benchmark_TakePipelines.limit_count_Java8Streams\r\nbenchmarks.Benchmark_TakePipelines.limit_count_iterate_Java8Streams\r\nbenchmarks.Benchmark_FusedPipelines.filters_Algebras_Push\r\nbenchmarks.Benchmark_FusedPipelines.maps_Algebras_Push\r\n```\r\n\r\n### Team\r\n\r\nAggelos Biboudis ([@biboudis](https://twitter.com/biboudis)), Nick Palladinos\r\n([@NickPalladinos](https://twitter.com/NickPalladinos)), George Fourtounis\r\n([@gf0ur](https://twitter.com/gf0ur)) and\r\n[Yannis Smaragdakis](http://www.di.uoa.gr/~smaragd/).\r\n","google":"UA-30141427-4","note":"Don't delete this file! It's used internally to help with page regeneration."}